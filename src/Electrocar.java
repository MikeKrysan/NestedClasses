public class Electrocar {
    private int id;
    private static int test;

    public Electrocar(int id) {
        this.id = id;
    }

    //Вложенный нестатический класс
    private class Motor {
        public void startMotor() {
            System.out.println("Motor " + id + " is starting...");
        }
    }

    //Вложенный статический класс
    public static class Battery {
        public void charge() {
            System.out.println("Battery is charging...");
        }
    }

    public void start() {
        Motor motor = new Motor();  //(1)
        motor.startMotor();

        final int x = 1;    //(4)

        //Вложенный класс внутри метода (3)
        class SomeClass {
            public void someMethod() {
                System.out.println(x);
                System.out.println(id);
            }
        }
        SomeClass someObject = new SomeClass();
        test(someObject);   //смотри п.3

        System.out.println("Electrocar " + id + " is starting...");
    }

    private void test(Object object) {

    }
}

/*
1. Вложенный нестатический класс (обычно  private) используется в том случае, когда
    создаваемый объект родительского класса сложный по своей структуре, и нам нужно
    выделить отдельные узлы(подклассы), объекты которых мы сможем запускать в методах
    родительского класса.
   Вложенные нестатические классы имеют доступ к переменным родительского класса

2. Статические вложенные классы. Обычно бывают публичными. Не имеют доступа к полям
    родительского класса. Может получать доступ к статическим полям класса Electrocar.
    Статические вложенные классы обычно используются извне. Но при этом они связаны логикой
    с родительским классом. Чем вложенный статический класс может быть нам полезен?
    Смотри класс Test

3. Вложенный класс внутри метода имеет доступ к полям родительского класса и к полям
    его метода. Доступ к переменным внутри метода только к константам (final), это связано с ограничение языка.
    Это похоже на анонимный класс, но в данном случае создается полноценный класс, на котором
    можно создать его объект и этот объект передать в качестве аргумента в другом методе родительского класса

4. Вложенные в методы классы и константы
Все дело в том, что при создании объекта вложенного класса внутри метода все переменные метода копируются в объект этого вложенного класса.
То есть переменные в методе и переменные во вложенном в этот метод классе - это две разные переменные, которые имеют одинаковое значение.

Пример:
public void test() {
    final int a = 5; // эта переменная
    class SomeClass {
        public void someMethod() {
            a = 1; // отличается от этой переменной
        }
    }
}

Имея в виду такую особенность реализации вложенных классов в Java, разработчики языка решили, что возможность передавать во вложенные классы не константы приведет к путанице.

Какого рода путаница?
Если бы вы могли передавать во вложенные классы переменные-неконстанты, то вы бы могли изменять их внутри вложенных классов. Тогда, изменив переменную внутри класса, вы бы ожидали,
что она изменится и в самом методе-обертке, но этого не произойдет потому, что в методе и во вложенном классе хранятся разные переменные.

И наоборот, изменяя переменную в методе, вы бы ожидали, что она изменится во вложенном классе, но этого не произойдет.

Поэтому, чтобы такой путаницы не возникало, во вложенные классы можно передавать только final переменные.

 */